// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TABP.Infrastructure.Migrations
{
    [DbContext(typeof(InfrastructureDbContext))]
    [Migration("20241229230058_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("RoomAmenityRoomType");
                });

            modelBuilder.Entity("TABP.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4b8e2b5-4a47-4f7d-9571-1018a3e8745f"),
                            BookingDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 120.0,
                            RoomId = new Guid("b362b1ae-4f39-453f-b0f3-5a8f9d1b2815"),
                            UserId = new Guid("473c85c7-8e77-4bc3-b5fa-1d27c5f9d2f1")
                        },
                        new
                        {
                            Id = new Guid("bbf9562b-3a0d-4729-a421-55e2a84f9a0d"),
                            BookingDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 175.0,
                            RoomId = new Guid("aa08b4e7-cbbc-4661-9bc3-2b2333bfe4de"),
                            UserId = new Guid("9dcbf1b8-1a88-47b1-bc74-76c2fd10f23a")
                        },
                        new
                        {
                            Id = new Guid("cd0a6077-c3a7-4d56-8356-12a6de4e7a82"),
                            BookingDate = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 250.0,
                            RoomId = new Guid("8ac05d5d-f8d9-49de-bf2d-2746763b1459"),
                            UserId = new Guid("a9d0a22f-5411-4c76-b1cc-056b9b400a61")
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a23d7e4f-0c9d-4d91-bb2e-df8f2fa12a6e"),
                            CountryCode = "DE",
                            CountryName = "Germany",
                            Name = "Berlin",
                            PostOffice = "BER"
                        },
                        new
                        {
                            Id = new Guid("6d7b2be5-455f-4bbf-91ae-87b95b5fbb89"),
                            CountryCode = "FR",
                            CountryName = "France",
                            Name = "Paris",
                            PostOffice = "PAR"
                        },
                        new
                        {
                            Id = new Guid("ec9d0150-b648-4d0d-9149-8be65f7d0b10"),
                            CountryCode = "AU",
                            CountryName = "Australia",
                            Name = "Sydney",
                            PostOffice = "SYD"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("TABP.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FloorsNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d5c7b1-36fa-4b52-bc42-d8d7589478fd"),
                            CityId = new Guid("a23d7e4f-0c9d-4d91-bb2e-df8f2fa12a6e"),
                            Description = "An upscale hotel with panoramic city views.",
                            FloorsNumber = 15,
                            Name = "Grand Plaza Hotel",
                            OwnerId = new Guid("9bfc8bc4-8278-453b-9ff4-d075f960ea44"),
                            PhoneNumber = "9876543210",
                            Rating = 4.7f,
                            StreetAddress = "1500 Skyline Blvd"
                        },
                        new
                        {
                            Id = new Guid("bb507c23-35fd-4b6c-83c0-b3fc54d40d4b"),
                            CityId = new Guid("6d7b2be5-455f-4bbf-91ae-87b95b5fbb89"),
                            Description = "A peaceful retreat in the heart of the mountains.",
                            FloorsNumber = 6,
                            Name = "Mountain Retreat",
                            OwnerId = new Guid("3a89e98d-cb27-4632-a7f9-36b163479e70"),
                            PhoneNumber = "6145678901",
                            Rating = 4.1f,
                            StreetAddress = "102 Pine Ridge Lane"
                        },
                        new
                        {
                            Id = new Guid("39a6cb7d-31c4-4752-bb6e-8c76a04e3e9f"),
                            CityId = new Guid("ec9d0150-b648-4d0d-9149-8be65f7d0b10"),
                            Description = "A hotel offering stunning views of the ocean waves.",
                            FloorsNumber = 8,
                            Name = "Seaside View Hotel",
                            OwnerId = new Guid("b5e9f7b9-1a25-4c5c-b378-078c76df1f7a"),
                            PhoneNumber = "7145678902",
                            Rating = 4.3f,
                            StreetAddress = "45 Oceanfront Way"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TABP.Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bfc8bc4-8278-453b-9ff4-d075f960ea44"),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("3a89e98d-cb27-4632-a7f9-36b163479e70"),
                            Email = "alicesmith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            Id = new Guid("b5e9f7b9-1a25-4c5c-b378-078c76df1f7a"),
                            Email = "bobjohnson@example.com",
                            FirstName = "Bob",
                            LastName = "Johnson",
                            PhoneNumber = "1122334455"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("Method");

                    b.HasIndex("Status");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea5d0358-0ed8-4c16-8693-77d1c5f6f1e1"),
                            Amount = 1750.0,
                            BookingId = new Guid("d4b8e2b5-4a47-4f7d-9571-1018a3e8745f"),
                            Method = "CreditCard",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("d9c0b7c4-4c8f-4a93-8785-d72011fdc17b"),
                            Amount = 800.0,
                            BookingId = new Guid("bbf9562b-3a0d-4729-a421-55e2a84f9a0d"),
                            Method = "Cash",
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = new Guid("66e6cfe3-91d3-4266-bf42-e4bcb024c8a7"),
                            Amount = 2200.0,
                            BookingId = new Guid("cd0a6077-c3a7-4d56-8356-12a6de4e7a82"),
                            Method = "Cash",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6c8fe16-8f4b-47a7-99a0-c55693f253b9"),
                            BookingId = new Guid("d4b8e2b5-4a47-4f7d-9571-1018a3e8745f"),
                            Comment = "Had a fantastic experience, would definitely stay again!",
                            Rating = 4.9f,
                            ReviewDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f1f4d8f0-e8bc-4ed3-bb99-435b8ff7d8ab"),
                            BookingId = new Guid("bbf9562b-3a0d-4729-a421-55e2a84f9a0d"),
                            Comment = "Great value for the price, will recommend to friends.",
                            Rating = 4.3f,
                            ReviewDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e85f951d-b0f1-4655-90f1-8bcdb563b3c2"),
                            BookingId = new Guid("cd0a6077-c3a7-4d56-8356-12a6de4e7a82"),
                            Comment = "Good location, but the room could be cleaner.",
                            Rating = 3.8f,
                            ReviewDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultsCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b362b1ae-4f39-453f-b0f3-5a8f9d1b2815"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 1,
                            Rating = 4.7f,
                            RoomTypeId = new Guid("f67a1832-c747-4bfe-946f-9b941d1059b3"),
                            View = "Garden View"
                        },
                        new
                        {
                            Id = new Guid("aa08b4e7-cbbc-4661-9bc3-2b2333bfe4de"),
                            AdultsCapacity = 3,
                            ChildrenCapacity = 2,
                            Rating = 4.3f,
                            RoomTypeId = new Guid("48a98ac1-9079-413a-8cc2-299a6c8a4515"),
                            View = "Sea View"
                        },
                        new
                        {
                            Id = new Guid("8ac05d5d-f8d9-49de-bf2d-2746763b1459"),
                            AdultsCapacity = 4,
                            ChildrenCapacity = 2,
                            Rating = 4.6f,
                            RoomTypeId = new Guid("cc8eb9be-0398-4a0d-bb6f-7ea5d58a9cf0"),
                            View = "Lake View"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("TABP.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PricePerNight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f67a1832-c747-4bfe-946f-9b941d1059b3"),
                            Category = "Single",
                            HotelId = new Guid("b2e04d28-78c5-404d-9264-215f88e6b3a1"),
                            PricePerNight = 120f
                        },
                        new
                        {
                            Id = new Guid("48a98ac1-9079-413a-8cc2-299a6c8a4515"),
                            Category = "Double",
                            HotelId = new Guid("a42d4d56-865b-4526-9a45-c8d5d8da3e6f"),
                            PricePerNight = 180f
                        },
                        new
                        {
                            Id = new Guid("cc8eb9be-0398-4a0d-bb6f-7ea5d58a9cf0"),
                            Category = "Single",
                            HotelId = new Guid("572f85b1-6223-442a-bf0a-7dbb9307f1d7"),
                            PricePerNight = 300f
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("473c85c7-8e77-4bc3-b5fa-1d27c5f9d2f1"),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "hashedPassword1",
                            PhoneNumber = "1234567890",
                            Role = "Admin",
                            Salt = "salt1"
                        },
                        new
                        {
                            Id = new Guid("9dcbf1b8-1a88-47b1-bc74-76c2fd10f23a"),
                            Email = "alicesmith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            PasswordHash = "hashedPassword2",
                            PhoneNumber = "9876543210",
                            Role = "Guest",
                            Salt = "salt2"
                        },
                        new
                        {
                            Id = new Guid("a9d0a22f-5411-4c76-b1cc-056b9b400a61"),
                            Email = "bobjohnson@example.com",
                            FirstName = "Bob",
                            LastName = "Johnson",
                            PasswordHash = "hashedPassword3",
                            PhoneNumber = "1122334455",
                            Role = "Guest",
                            Salt = "salt3"
                        });
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.HasOne("TABP.Domain.Entities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Booking", b =>
                {
                    b.HasOne("TABP.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entities.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TABP.Domain.Entities.Discount", b =>
                {
                    b.HasOne("TABP.Domain.Entities.RoomType", null)
                        .WithMany("Discounts")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("TABP.Domain.Entities.City", null)
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entities.Owner", null)
                        .WithMany("Hotels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Payment", b =>
                {
                    b.HasOne("TABP.Domain.Entities.Booking", null)
                        .WithOne("Payment")
                        .HasForeignKey("TABP.Domain.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Review", b =>
                {
                    b.HasOne("TABP.Domain.Entities.Booking", null)
                        .WithOne("Review")
                        .HasForeignKey("TABP.Domain.Entities.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Room", b =>
                {
                    b.HasOne("TABP.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TABP.Domain.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TABP.Domain.Entities.Owner", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TABP.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("TABP.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
